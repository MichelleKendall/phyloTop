setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::load_all()
library(NHPoisson)
install.packages("~/downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
library(NHPoisson)
install.packages("~/downloads/pbkrtest_0.4-5.tar.gz", repos = NULL, type = "source")
install.packages("NHPoisson")
library(NHPoisson)
setwd("C:/Users/mlkendal/Dropbox/phyloTop/R")
phyloTopfuncs <- c("avgLadder", # will use new igraph method
"baseAnalysis",
"baseCreate",
"baseListAnalysis",
"baseListCreate",
"cherries", # will use new nconfig
"classifyConfigFive", # used?!
"classifyConfigFour", # used?!
"colless", # can just use ape?
"configFind",
"configShow",
"configTop",
"dists" # deprecated, now getDepths
"fAvgLadder",
"fColless",
"fNConfig",
"fNLadders",
"fWidths",
"getDepths", # uses phylo and phylo4, done
"getGenealogy",
"idNodeLabel",
"ILnumber",
"ladderDist",
"ladderNums",
"ladderShow",
"laddItr",
"makePhyloTree",
"makeTransTree",
"maxHeight",
"modelCreate",
"modelSummary",
"nConfig",
"nDescendants",
"nLadders",
"nodeApply",
"nodeDist",
"nodeFrac",
"nodeImb",
"nTipChildren",
"nTipDescendants",
"phyloCheck",
"pitchforks",
"rootLaddDist",
"rtree4",
"sackin",
"sortMyEpi",
"splitTop",
"stairs",
"subtreeShow",
"topSumm",
"treeImb",
"treeListSummary",
"widths"
)
phyloTopfuncs <- c("avgLadder", # will use new igraph method
"baseAnalysis",
"baseCreate",
"baseListAnalysis",
"baseListCreate",
"cherries", # will use new nconfig
"classifyConfigFive", # used?!
"classifyConfigFour", # used?!
"colless", # can just use ape?
"configFind",
"configShow",
"configTop",
"dists", # deprecated, now getDepths
"fAvgLadder",
"fColless",
"fNConfig",
"fNLadders",
"fWidths",
"getDepths", # uses phylo and phylo4, done
"getGenealogy",
"idNodeLabel",
"ILnumber",
"ladderDist",
"ladderNums",
"ladderShow",
"laddItr",
"makePhyloTree",
"makeTransTree",
"maxHeight",
"modelCreate",
"modelSummary",
"nConfig",
"nDescendants",
"nLadders",
"nodeApply",
"nodeDist",
"nodeFrac",
"nodeImb",
"nTipChildren",
"nTipDescendants",
"phyloCheck",
"pitchforks",
"rootLaddDist",
"rtree4",
"sackin",
"sortMyEpi",
"splitTop",
"stairs",
"subtreeShow",
"topSumm",
"treeImb",
"treeListSummary",
"widths"
)
#' Check the format of the tree
#'
#' Coerces the tree into a rooted, binary tree of class phylo. Note that this function used to require trees to be of class \code{phylo4} but this is no longer needed.
#'
#' @author Caroline Colijn \email{c.colijn@imperial.ac.uk}
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#'
#' @param tree a tree of class \code{phylo} or \code{phylo4}. For most functions in this package the tree should be binary and rooted, hence this function is called to check.
#' If necessary the tree will be coerced into a binary rooted tree using multi2di, if possible.
#' @return A binary, rooted tree of class \code{phylo}, if possible.
#'
#' @import ape
#'
#'
#' @export
phyloCheck <- function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
}
phyloCheck <- function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
return(tree)
}
getDepths=function(tree) {
# perform tree checks:
tree <- phyloCheck(tree)
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
# get the root descendants
toDo <- Pointers[Ancs==root,]
# retain any which are not tips - these will be the next entries "to do" in pDep:
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
oP <- order(Pointers)
tipDepths <- pDep[oP][1:ntip]
nodeDepths <- c(0,pDep[oP][Ancs])
return(list(tipDepths=tipDepths, nodeDepths=nodeDepths))
}
getDepths(rtree(10))
getDepths(rtree(10, rooted=FALSE))
tree <- phyloCheck(tree)
tree <- rtree(10)
tree <- phyloCheck(tree)
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
Ancs
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
pDep <- NA + Pointers
pDep[Ancs==root,] <- c(1,1)
toDo <- Pointers[Ancs==root,]
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
pDep
oP <- order(Pointers)
tipDepths <- pDep[oP][1:ntip]
tipDepths
nodeDepths <- c(0,pDep[oP][Ancs])
nodeDepths
pDep[oP][Ancs]
Ancs
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
tree$node.label
tree <- rtree(10)
tree$node.label
tree$node.label <- 1:9
tree$node.label
plot(tree, show.node.label=TRUE)
Pointers
oP <- order(Pointers)
oP
Ancs
Ancs[-max(Ancs)]
Ancs[-length(Ancs)]
nodeDepths <- c(0,pDep[oP][Ancs[-length(Ancs)]])
nodeDepths
getDepths=function(tree) {
# perform tree checks:
tree <- phyloCheck(tree)
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
# get the root descendants
toDo <- Pointers[Ancs==root,]
# retain any which are not tips - these will be the next entries "to do" in pDep:
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
oP <- order(Pointers)
tipDepths <- pDep[oP][1:ntip]
nodeDepths <- c(0,pDep[oP][Ancs[-length(Ancs)]])
return(list(tipDepths=tipDepths, nodeDepths=nodeDepths))
}
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
tree <- rtree(20)
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
avgLadder(rtree4(10))
avgLadder <- function(tree) {
ladderNumbers <- ladderNums(tree)
sum <- 0
nLadds <- 0
m <- max(ladderNumbers)
while (m > 0) {
count <- sum(ladderNumbers==m)
nLadds <- nLadds + count
sum <- sum + m*count
ladderNumbers <- laddItr(ladderNumbers)
m <- max(ladderNumbers)
}
return(sum/nLadds)
}
avgLadder(rtree4(10))
ladderNums <-function(tree) {
arr <- as.array(nodeId(tree))
locLadd <- function(x) {
if (nodeType(tree)[x]=='tip') {return(0)}
else {return(rootLaddDist(subset(tree,node.subtree=x)))}
}
ladderNumbers <- apply(arr,1,locLadd)
return(ladderNumbers)
}
ladderNums(rtree4(10))
phyloTopfuncs <- c("avgLadder", # will use new igraph method
"baseAnalysis",
"baseCreate",
"baseListAnalysis",
"baseListCreate",
"cherries", # will use new nconfig
"classifyConfigFive", # used?!
"classifyConfigFour", # used?!
"colless", # can just use ape?
"configFind",
"configShow",
"configTop",
"dists", # deprecated, now getDepths
"fAvgLadder",
"fColless",
"fNConfig",
"fNLadders",
"fWidths",
"getDepths", # uses phylo and phylo4, done
"getGenealogy",
"idNodeLabel",
"ILnumber",
"ladderDist",
"ladderNums",
"ladderShow",
"laddItr",
"makePhyloTree",
"makeTransTree",
"maxHeight",
"modelCreate",
"modelSummary",
"nConfig",
"nDescendants",
"nLadders",
"nodeApply",
"nodeDist",
"nodeFrac",
"nodeImb",
"nTipChildren",
"nTipDescendants",
"phyloCheck", # done
"pitchforks",
"rootLaddDist",
"rtree4",
"sackin",
"sortMyEpi",
"splitTop",
"stairs",
"subtreeShow",
"topSumm",
"treeImb",
"treeListSummary",
"widths"
)
source(phyloTopfuncs)
for (i in 1:length(phyloTopfuncs)){
print(paste0(phyloTopfuncs[[i]],".R"))
}
for (i in 1:length(phyloTopfuncs)){
source(paste0(phyloTopfuncs[[i]],".R"))
}
phyloTopfuncs <- c("avgLadder", # will use new igraph method
"baseAnalysis",
"baseCreate",
"baseListAnalysis",
"baseListCreate",
"cherries", # will use new nconfig
"classifyConfigFive", # used?!
"classifyConfigFour", # used?!
"colless", # can just use ape?
"configFind",
"configShow",
"configTop",
"dists", # deprecated, now getDepths
"fAvgLadder",
"fColless",
"fNConfig",
"fNLadders",
"fWidths",
"getDepths", # uses phylo and phylo4, done
"getGenealogy",
"idNodeLabel",
"ILnumber",
"ladderDist",
"ladderNums",
"ladderShow",
"laddItr",
"makePhyloTree",
"makeTransTree",
"maxHeight",
"modelCreate",
"modelSummary",
"nConfig",
"nDescendants",
"nLadders",
"nodeApply",
"nodeDist",
"nodeFrac",
"nodeImb",
"nTipChildren",
"nTipDescendants",
"phyloCheck", # done
"pitchforks",
"rootLaddDist",
"rtree4",
"sackin",
"sortMyEpi",
"splitTop",
"stairs",
#"subtreeShow",
"topSumm",
"treeImb",
"treeListSummary",
"widths"
)
for (i in 1:length(phyloTopfuncs)){
source(paste0(phyloTopfuncs[[i]],".R"))
}
avgLadder(rtree4(10))
idNodeLabel(rtree(10))
baseCreate <- function(tree,baseFuncs) {
arr <- as.array(1:length(baseFuncs))
output <- lapply(arr,function(x){baseFuncs[[x]](tree)})
return(output)
}
baseCreate(rtree4(10),c(avgLadder,cherries))
baseCreate(rtree4(10),c(cherries))
require(phylobase)
baseCreate(rtree4(10),c(avgLadder,cherries))
baseCreate <- function(tree,baseFuncs) {
tree <- phyloCheck(tree)
arr <- as.array(1:length(baseFuncs))
output <- lapply(arr,function(x){baseFuncs[[x]](tree)})
return(output)
}
baseCreate(rtree4(10),c(avgLadder,cherries))
?colless
nTipDescendants(rtree4(10))
install.packages("apTreeshape")
install.packages("RPANDA")
require(RPANDA)
spectR(rtree(20), method=c("standard"))
system.time(spectR(rtree(20), method=c("standard")))
system.time(spectR(rtree(200), method=c("standard")))
system.time(spectR(rtree(2000), method=c("standard")))
