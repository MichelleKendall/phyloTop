}
tt=rtree(20)
require(treescape)
ttd=getDepths(tt)
tt$tip.label=ttd$tipDepths; tt$node.label=ttd$nodeDepths; plot(tt, show.node.label=TRUE)
tt=rtree(20)
ttd=getDepths(tt)
tt$tip.label=ttd$tipDepths; tt$node.label=ttd$nodeDepths; plot(tt, show.node.label=TRUE)
ttd
?tip.label
tree
tree <- rtree(6)
tree
tree <- rtree(6, rooted=FALSE)
tree
if(!is.rooted(tree)) stop("problems!")
require(phylobase)
require(phyloTop)
rtree4 <- function(n, ...) {
return(as(rtree(n, ...), 'phylo4'))
}
test <- rtree4(6)
test
tree <- as.phylo(test)
tree <- as(tree, "phylo")
tree
tree <- as(test, "phylo")
tree
tree <- as(rtree4(10), "phylo")
tree
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
tree$edge
plot(tree)
edge_order
edge_order <- ape::reorder.phylo(tree, "postorder", index.only=T)
edge_order
edges <- tree$edge[edge_order,]
edges
edge_lengths <- tree$edge.length[edge_order]
edge_lengths
edge_order <- ape::reorder.phylo(tree, "postorder", index.only=T)
edge_order
?reorder.phylo
edge_order <- ape::reorder.phylo(tree, "preorder", index.only=T)
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
edges
edge_lengths
ntip <- length(tree$tip.label)
ntip
nn <- tree$Nnode;
nn
edges
edges[[1]]
edges[1,1]
Ancs <- (ntip+1):(ntip+nn)
Ancs
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2))) # row= node (ntip+1, ... ntip+nn). [des1, des2].
Pointers
getDepths=function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is rooted; if not, midpoint root with a warning
if(!is.rooted(tree)) {
warning("A rooted tree is expected. Midpoint rooting the supplied tree.") }
# coerce into helpful edge ordering, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2))) # row= node (ntip+1, ... ntip+nn). [des1, des2].
pDep=NA+Pointers; pDep[Ancs==root,] = c(1,1);
toDo=Pointers[Ancs==root,]; toDo=toDo[toDo>ntip]; sdep=1;
while (any(is.na(pDep))) {
pDep[toDo-ntip,]=sdep+1;
toDo=Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]; sdep=sdep+1;
}
oP=order(Pointers)
return(list(tipDepths=pDep[oP][1:ntip], nodeDepths=c(0,pDep[oP][(ntip+1):(ntip+nn)]) ))
}
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2))) # row= node (ntip+1, ... ntip+nn). [des1, des2].
Pointers
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
plot(tree)
show.nodel.label()
plot(tree, show.node.label=TRUE)
tree <- rtree(20)
plot(tree, show.node.label=TRUE)
tree$edge
tree <- rtree(20)
treeDepths <- getDepths(tree)
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
plot(tree)
nodeLabels()
node.labels()
nodelabels()
tiplabels()
pDep=NA+Pointers
pDep
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
pDep <- NA + Pointers
pDep
pDep[Ancs==root,] = c(1,1);
pDep
?multi2di
?rtree
tree <- rtree(10, rooted=FALSE)
if(!is.binary.tree(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
}
tree
is.binary.tree(tree)
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
}
tree
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
tree <- rtree(10, rooted=FALSE)
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
tree
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
pDep <- NA + Pointers
pDep
pDep[Ancs==root,] = c(1,1)
pDep
toDo <- Pointers[Ancs==root,]
toDo
Ancs
root
pDep
which(Ancs==root)
Ancs==root
toDo
Pointers
toDo
plot(tree)
nodelabels()
toDo=toDo[toDo>ntip]
toDo
pDep[toDo-ntip,] <- sdep + 1
sdep <- 1
pDep[toDo-ntip,] <- sdep + 1
pDep
pDep <- NA + Pointers
pDep[Ancs==root,] <- c(1,1)
pDep
toDo <- Pointers[Ancs==root,]
toDo
toDo <- toDo[toDo>ntip]
toDo
sdep <- 1
pDep[toDo-ntip,]
toDo-ntip
pDep[toDo-ntip,] <- sdep + 1
pDep
Pointers[toDo-ntip,]
[Pointers[toDo-ntip,]>ntip]
Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
toDo
sdep
pDep
pDep[toDo-ntip,] <- sdep + 1
pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
toDo
sdep <- sdep + 1
sdep
pDep
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
pDep
oP=order(Pointers)
oP
tipDepths=pDep[oP][1:ntip]
tipDepths
tree <- rtree(10)
tree <- rtree(20)
getDepths=function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
# get the root descendants
toDo <- Pointers[Ancs==root,]
# retain any which are not tips - these will be the next entries "to do" in pDep:
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
oP=order(Pointers)
return(list(tipDepths=pDep[oP][1:ntip], nodeDepths=c(0,pDep[oP][(ntip+1):(ntip+nn)]) ))
}
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
pDep
toDo <- Pointers[Ancs==root,]
toDo <- toDo[toDo>ntip]
toDo
sdep <- 1
pDep[toDo-ntip,] <- sdep + 1
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
pDep
oP=order(Pointers)
oP=order(Pointers)
oP
pDep[oP]
nodeDepths=c(0,pDep[oP][(ntip+1):(ntip+nn)])
nodeDepths
nodeDepths=c(0,pDep[oP][Ancs])
nodeDepths
pDep[oP][Ancs]
pDep
Ancs
getDepths=function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
# get the root descendants
toDo <- Pointers[Ancs==root,]
# retain any which are not tips - these will be the next entries "to do" in pDep:
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
oP <- order(Pointers)
tipDepths <- pDep[oP][1:ntip]
nodeDepths <- c(0,pDep[oP][Ancs])
return(list(tipDepths, nodeDepths))
}
five <- allTrees(5, rooted=TRUE, tip.label=1:5)
require(phangorn)
five <- allTrees(5, rooted=TRUE, tip.label=1:5)
getDepths(five[[1]])
tree <- five[[1]]
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
tree
five[[1]]
tree <- five[[1]]
tree
treeDepths <- getDepths(tree)
treeDepths
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
tree <- five[[1]]
treeDepths <- getDepths(tree)
treeDepths
tree$tip.label
treeDepths$tipDepths
getDepths=function(tree) {
# check input class
if (class(tree)=="phylo4") {tree <- as(tree, "phylo")}
else if (class(tree) != "phylo") {stop("Input of class phylo or phylo4 expected.")}
# check if the tree is binary and rooted; if not, do multi2di with a warning
if(!is.binary.tree(tree)||!is.rooted(tree)) {
warning("A binary, rooted tree is expected. Applying multi2di to the supplied tree.")
tree <- multi2di(tree, random=FALSE)
# check if it worked (sometimes it can't manage it!)
if(!is.binary.tree(tree)||!is.rooted(tree)) {stop("Unable to coerce the tree to be binary and rooted.")}
}
# reorder (if necessary) edges into helpful order, with the root first
# Parents appear before descendants
edge_order <- ape::reorder.phylo(tree, "cladewise", index.only=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
root <- edges[1,1]
ntip <- length(tree$tip.label)
nn <- tree$Nnode
# list of ancestral (internal) node numbers
Ancs <- (ntip+1):(ntip+nn)
# Pointers is a matrix where rows correspond to internal nodes in the order (ntip+1, ..., ntip+nn)
# The two columns give the two descendants of that node
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
# initialise pDep, the node depth array
pDep <- NA + Pointers
# fill in first value: the root is depth 1
pDep[Ancs==root,] <- c(1,1)
# get the root descendants
toDo <- Pointers[Ancs==root,]
# retain any which are not tips - these will be the next entries "to do" in pDep:
toDo <- toDo[toDo>ntip]
sdep <- 1
while (any(is.na(pDep))) {
# fill in the "to do" entries of pDep with the current depth
pDep[toDo-ntip,] <- sdep + 1
# establish their non-tip descendants, as the next "to do" in pDep
toDo <- Pointers[toDo-ntip,][Pointers[toDo-ntip,]>ntip]
sdep <- sdep + 1
}
oP <- order(Pointers)
tipDepths <- pDep[oP][1:ntip]
nodeDepths <- c(0,pDep[oP][Ancs])
return(list(tipDepths=tipDepths, nodeDepths=nodeDepths))
}
treeDepths <- getDepths(tree)
treeDepths
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
plot(five[[894]])
plot(five[[89]])
tree <- five[[89]]
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
dists <- function(tree) {
warning("This function is now deprecated. Please use getDepths instead.")
#edgeLength(tree) <- rep(1,nEdges(tree))
#arr <- as.array(1:length(nodeId(tree)))
#suppressWarnings(nodeDep <- apply(arr,1,function(x){nodeDepth(tree,x)-1}))
#return(nodeDep)
}
dists(tree)
dists <- function(tree) {
warning("This function is now deprecated. Please use getDepths instead.")
edgeLength(tree) <- rep(1,nEdges(tree))
arr <- as.array(1:length(nodeId(tree)))
suppressWarnings(nodeDep <- apply(arr,1,function(x){nodeDepth(tree,x)-1}))
return(nodeDep)
}
dists(tree)
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::load_all()
install.packages("NHPoisson")
devtools::load_all()
library(NHPoisson)
install.packages("pbkrtest")
library(NHPoisson)
install.packages("pbkrtest")
install.packages("~/downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
