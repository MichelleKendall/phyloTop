BranchNums <- (NumLeaves+1):(2*NumLeaves-1); # IDs for internal branches of the genealogy
LengthstoInternals <- rep(0,NN)
TipLengths <- rep(0,NumLeaves)
B <- matrix(0,nrow=NN, ncol=2) # use a 2-col [desc desc] format; convert afterwards
for (n in 1:NN ) {
#### PART 1 : connecting the internal branches / tips
if (n ==1 ) {
B[n,]<-c(Infectors[n], Infectees[n]);
}
else {
# 1: did the infectEE go on to infect anyone else?
Onward <- is.element(Infectees[n],Infectors[1:(n-1)])
if (Onward) {
Desc1 <- BranchNums[max(which(Infectors[1:(n-1)] == Infectees[n]))]
}
else {
Desc1 <- Infectees[n]
}
# 2: did the infectOR go on to infect anyone else?
Onward <- is.element(Infectors[n],Infectors[1:(n-1)])
if (Onward){
Desc2 <- BranchNums[max(which(Infectors[1:(n-1)]==Infectors[n]))]
}
else {
Desc2 <- Infectors[n]
}
B[n,] <- c(Desc1,Desc2) # if n is NN, then this branch is the root.
}
### PART 2: lengths of internal branches
HasInfBefore <- is.element(Infectors[n],Infectors[(n+1):length(Infectors)])
if (HasInfBefore){
IND=n+ min(which(Infectors[(n+1):length(Infectors)]==Infectors[n])) # most recently
LengthstoInternals[n]=InfTimes[n]-InfTimes[IND]; # corresponds to int pt n,
}
else {
IND<- which(Infectees==Infectors[n]) # index when this guy got infected
LengthstoInternals[n]=InfTimes[n]-InfTimes[IND]
}
} # end for loop
### now assign lengths of tip branches
for (n in 1:length(Infectees)) {
HasInfBefore<-is.element(Infectees[n],Infectors)
if (HasInfBefore) {
IND=min(which(Infectors==Infectees[n]))
TipLengths[n] <- SortedRecTimes[n]-InfTimes[IND]
}
else {
TipLengths[n]<-SortedRecTimes[n]-InfTimes[n]
}
}
# TipLengths are in the same order as Infectee. We sort the flags along with epirecord so that flag[n] will correspond to TipLength[n]
ReorderedTipLengths=rep(0,length(TipLengths))
ReorderedTipLengths[Infectees]=TipLengths
## now create the genealogy: change format
# initialise
Edges=matrix(0,nrow=2*NN, ncol=2)
Lengths<-0*(1:(2*NN))
FLAGS <- Lengths
ROSortedFLAGS <- SortedFLAGS
ROSortedFLAGS[Infectees] <- SortedFLAGS
for (n in 1:NN) {
Edges[2*n-1,1] <- n+NN+1
Edges[2*n,1] <- n+NN+1
Edges[2*n-1,2] <- B[n,1]
Edges[2*n,2] <- B[n,2]
}
Lengths[1] <- 0;
for (n in 1:(2*NN)) {
IsDescTip <- (Edges[n,2]<= NN+1)
if (IsDescTip) {
Lengths[n]<- ReorderedTipLengths[Edges[n,2]] # if he is a tip, here is his length
FLAGS[n] <- ROSortedFLAGS[Edges[n,2]] # and here is his flag.  # CONFIRMED
}
else {
Lengths[n]<- LengthstoInternals[Edges[n,2]-NN-1]
}
}
# if any lengths are zero, make them length epsilon
Lengths[Lengths==0]=epsilon
Edges[Edges>NumLeaves]= 3*NumLeaves - Edges[Edges>NumLeaves]; # so branches start at ROOT
Genealogy <- makePhyloTree(Edges,Lengths,NumLeaves+1) # NOW root is first branch, not last
return(Genealogy)
}
devtools::document()
?simNHP.fun
myepirecord <- makeEpiRecord(c(1,2,3,4)
)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=5)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=1, NumCases=100)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=1, NumCases=100)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,1,1,1))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,1))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2, NumCases=100)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2, NumCases=100)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2, NumCases=100)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2, NumCases=100)
myepirecord
myepirecord <- makeEpiRecord(c(1,2,3,4), duration=2, NumCases=100)
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
devtools::document()
Edges
class(Edges)
tree <- rtree(10)
tree$edge
Lengths
class(Lengths)
devtools::document()
devtools::load_all()
devtools::check()
?graph
devtools::document()
graph(edges=t(Edges))
devtools::document()
devtools::document()
devtools::document()
graph
devtools::document()
devtools::load_all()
devtools::document()
devtools::build()
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::load_all()
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
devtools::install_github("michellekendall/phyloTop") # Installs the latest version of phyloTop. You'll need to have the package devtools installed for this.
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::load_all()
devtools::build()
install.packages("C:/Users/mlkendal/Dropbox/phyloTop_2.0.0.tar.gz", repos = NULL, type = "source")
devtools::load_all(".")
nodeImb(rtree(10),16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
devtools::document()
devtools::load_all()
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
library(Cairo)
?Cairo
phyloCheck(tree)
nodeImb(tree,16)
nodeImb(tree,26)
nodeImb(tree,6)
nodeImb(tree,16)
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepth(tree,34)
Ntips <- length(tree$tip.label)
tree
int <- Ntips:(2*Ntips-1)
int
intNodes <- Ntips:(2*Ntips-1)
tree$Nnode
intNodes <- Ntips:(Ntips+tree$Nnode) # internal node numbers
intNodes
i <- 20
tmp <- nodeImb(tree,i)
tmp
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
intNodes
i <- 21
tmp <- nodeImb(tree,i)
tmp
diff <- abs(tmp[[1]]-tmp[[2]])
diff
threshold <- 10
count <- 0
count
if (diff>=threshold) {count <- count+1}
count
count/length(intNodes)
nodeImbFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
nodeImbFrac(tree,threshold=10)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
#' nodeImbFrac
#'
#' Calculate the fraction of internal nodes with an imbalance above a given threshold.
#'
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#'
#' @param tree a tree of class \code{phylo} or \code{phylo4}.
#' @param threshold a threshold value for node imbalance.
#'
#' @return For any internal node, the function \code{\link{nodeImb}} gives the number of tip descendants of each of the node's descending branches. \code{nodeImbFrac} returns the fraction of internal nodes where the difference between these numbers is greater than or equal to the threshold.
#'
#' @import ape ****FILL IN
#'
#' @seealso \code{\link{nodeImb}}, \code{\link{nodeDepth}}
#'
#' @examples
#' ## Find the fraction of internal nodes with an imbalance of 5 or more, in a random tree with 20 tips:
#' tree <- rtree(20)
#' plot(tree)
#' nodeImbFrac(tree,threshold=5)
#'
#' @export
nodeImbFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
tree <- rtree(20)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
nodeDepthFrac(tree,threshold=5)
tree <- rtree(20)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
nodes
count <- 0
tmp <- nodeDepth(tree,i)
tmp
i <- 1
tmp <- nodeDepth(tree,i)
tmp
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodes
tmp <- nodeDepth(tree,i)
tmp
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
nodes
count
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
tmp <- nodeDepth(tree,i)
i
i <- 1
tmp <- nodeDepth(tree,i)
tmp <- nodeDepth(tree,2)
tmp <- nodeDepth(tree,3)
tmp <- nodeDepth(tree,4)
tmp <- nodeDepth(tree,39)
tmp <- nodeDepth(tree,38)
nodelabel()
plot(tree)
nodelabel()
plot(tree)
nodelabels()
depths <- getDepths(tree)
depths
allDepths <- c(depths$tipDepths,depths$nodeDepths)
allDepths
l <- length(allDepths)
l
nodeDepth <- function(tree,node) {
depths <- getDepths(tree)
allDepths <- c(depths$tipDepths,depths$nodeDepths)
l <- length(allDepths)
if (node > l) stop(paste0("Please supply a valid node number between 1 and ",l))
return(allDepths[[node]])
}
#' nodeDepthFrac
#'
#' Calculate the fraction of nodes with a depth greater than or equal to a given threshold.
#'
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#'
#' @param tree a tree of class \code{phylo} or \code{phylo4}.
#' @param threshold a threshold value for node depth
#'
#' @return The fraction of nodes with a depth greater than or equal to the threshold (see \code{\link{nodeDepth}} for more details on the meaning of node depth).
#'
#' @import ape
#'
#' @seealso \code{\link{nodeDepth}}
#'
#' @examples
#' ## Find the fraction of nodes with a depth of 5 or more, in a random tree with 20 tips:
#' tree <- rtree(20)
#' plot(tree)
#' nodelabels()
#' nodeDepthFrac(tree,threshold=5)
#'
#' @export
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,38)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,38)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(nodes))
}
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(10)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(nodes))
}
tree <- rtree(10)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac(tree,threshold=4)
tree <- rtree(20)
tree$edge.length
tree$edge.length <- rep(1,38)
tree <- rtree(20)
plot(tree)
plot(tree, type="dendogram")
plot(tree, type="phylogram")
plot(tree, type="cladogram")
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
10/39
14/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
28/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
18/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
25/39
24/39
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac(tree,threshold=5) * 39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
18/39
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::build()
