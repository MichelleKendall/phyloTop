plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
devtools::document()
devtools::load_all()
tree <- rtree(10)
plot(tree)
nodelabels()
nodeImb(tree,16)
library(Cairo)
?Cairo
phyloCheck(tree)
nodeImb(tree,16)
nodeImb(tree,26)
nodeImb(tree,6)
nodeImb(tree,16)
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepth(tree,34)
Ntips <- length(tree$tip.label)
tree
int <- Ntips:(2*Ntips-1)
int
intNodes <- Ntips:(2*Ntips-1)
tree$Nnode
intNodes <- Ntips:(Ntips+tree$Nnode) # internal node numbers
intNodes
i <- 20
tmp <- nodeImb(tree,i)
tmp
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
intNodes
i <- 21
tmp <- nodeImb(tree,i)
tmp
diff <- abs(tmp[[1]]-tmp[[2]])
diff
threshold <- 10
count <- 0
count
if (diff>=threshold) {count <- count+1}
count
count/length(intNodes)
nodeImbFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
nodeImbFrac(tree,threshold=10)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodeImbFrac(tree,threshold=5)
#' nodeImbFrac
#'
#' Calculate the fraction of internal nodes with an imbalance above a given threshold.
#'
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#'
#' @param tree a tree of class \code{phylo} or \code{phylo4}.
#' @param threshold a threshold value for node imbalance.
#'
#' @return For any internal node, the function \code{\link{nodeImb}} gives the number of tip descendants of each of the node's descending branches. \code{nodeImbFrac} returns the fraction of internal nodes where the difference between these numbers is greater than or equal to the threshold.
#'
#' @import ape ****FILL IN
#'
#' @seealso \code{\link{nodeImb}}, \code{\link{nodeDepth}}
#'
#' @examples
#' ## Find the fraction of internal nodes with an imbalance of 5 or more, in a random tree with 20 tips:
#' tree <- rtree(20)
#' plot(tree)
#' nodeImbFrac(tree,threshold=5)
#'
#' @export
nodeImbFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
tree <- rtree(20)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
intNodes <- (Ntips+1):(Ntips+tree$Nnode) # internal node numbers
count <- 0
for (i in intNodes) {
tmp <- nodeImb(tree,i)
diff <- abs(tmp[[1]]-tmp[[2]])
if (diff>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
nodeDepthFrac(tree,threshold=5)
tree <- rtree(20)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
nodes
count <- 0
tmp <- nodeDepth(tree,i)
tmp
i <- 1
tmp <- nodeDepth(tree,i)
tmp
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodes
tmp <- nodeDepth(tree,i)
tmp
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
nodes
count
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
tmp <- nodeDepth(tree,i)
i
i <- 1
tmp <- nodeDepth(tree,i)
tmp <- nodeDepth(tree,2)
tmp <- nodeDepth(tree,3)
tmp <- nodeDepth(tree,4)
tmp <- nodeDepth(tree,39)
tmp <- nodeDepth(tree,38)
nodelabel()
plot(tree)
nodelabel()
plot(tree)
nodelabels()
depths <- getDepths(tree)
depths
allDepths <- c(depths$tipDepths,depths$nodeDepths)
allDepths
l <- length(allDepths)
l
nodeDepth <- function(tree,node) {
depths <- getDepths(tree)
allDepths <- c(depths$tipDepths,depths$nodeDepths)
l <- length(allDepths)
if (node > l) stop(paste0("Please supply a valid node number between 1 and ",l))
return(allDepths[[node]])
}
#' nodeDepthFrac
#'
#' Calculate the fraction of nodes with a depth greater than or equal to a given threshold.
#'
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#'
#' @param tree a tree of class \code{phylo} or \code{phylo4}.
#' @param threshold a threshold value for node depth
#'
#' @return The fraction of nodes with a depth greater than or equal to the threshold (see \code{\link{nodeDepth}} for more details on the meaning of node depth).
#'
#' @import ape
#'
#' @seealso \code{\link{nodeDepth}}
#'
#' @examples
#' ## Find the fraction of nodes with a depth of 5 or more, in a random tree with 20 tips:
#' tree <- rtree(20)
#' plot(tree)
#' nodelabels()
#' nodeDepthFrac(tree,threshold=5)
#'
#' @export
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,38)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(intNodes))
}
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,38)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(nodes))
}
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(20)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(10)
plot(tree)
nodelabels()
nodeDepthFrac(tree,threshold=5)
tree <- rtree(10)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac <- function(tree,threshold) {
# initial tree check
tree <- phyloCheck(tree)
Ntips <- length(tree$tip.label) # number of tips
nodes <- 1:(Ntips+tree$Nnode) # node numbers
count <- 0
for (i in nodes) {
tmp <- nodeDepth(tree,i)
if (tmp>=threshold) {count <- count+1}
}
return(count/length(nodes))
}
tree <- rtree(10)
plot(tree)
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac(tree,threshold=4)
tree <- rtree(20)
tree$edge.length
tree$edge.length <- rep(1,38)
tree <- rtree(20)
plot(tree)
plot(tree, type="dendogram")
plot(tree, type="phylogram")
plot(tree, type="cladogram")
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
10/39
14/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
28/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
18/39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
25/39
24/39
nodeDepthFrac(tree,threshold=5)
nodeDepthFrac(tree,threshold=5) * 39
tree <- rtree(20)
tree$edge.length <- rep(1,38) # so that the depths are easier to view in the plot
plot(tree)
nodeDepthFrac(tree,threshold=5)
18/39
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::build()
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
library(installr)
updateR()
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
devtools::load_all()
devtools::check()
devtools::build()
phyloTopfuncs <- c("avgLadder",
"cherries",
"colless.phylo",
"configShow",
"getDepths",
"getLabGenealogy",
"ILnumber",
"ladderSizes",
"ladderShow",
"makeEpiRecord",
"makePhyloTree",
"makeTransTree",
"maxHeight",
"modelCreate",
"modelSummary",
"nConfig",
"nodeDepth",
"nodeDepthFrac",
"nodeImb",
"nodeImbFrac",
"phyloCheck",
"pitchforks",
"rtree4",
"sackin.phylo",
"splitTop",
"stairs",
"treeImb",
"widths"
)
?avgLadder
?avgLadder
tree <- rtree(20)
avgLadder(tree)
avgLadder(tree, normalise=TRUE)
plot(tree)
avgLadder(tree)
avgLadder(tree, normalise=TRUE)
?cherries
tree <- rtree(10)
plot(tree)
cherries(tree)
cherries(tree, normalise=TRUE)
?configShow
configShow(tree,2, edge.width=2)
tree <- rtree(10)
plot(tree)
cherries(tree)
configShow(tree,2, edge.width=2)
?colless.phylo
library(apTreeshape)
?colless
colless.phylo(rtree(10))
tree <- rtree(10)
plot(tree)
colless.phylo(tree)
?configShow
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
?getDepths
tree <- rtree(20)
treeDepths <- getDepths(tree)
tree$tip.label <- treeDepths$tipDepths
tree$node.label <- treeDepths$nodeDepths
plot(tree, show.node.label=TRUE)
?getLabGenealogy
myepirecord <- makeEpiRecord(c(1,2,3,4))
mygenealogy <- getLabGenealogy(myepirecord)
plot(mygenealogy)
?ILnumber
tree <- rtree(10)
plot(tree)
ILnumber(tree)
tree <- rtree(10)
plot(tree)
ILnumber(tree)
ILnumber(tree, normalise=TRUE)
?ladderSizes
## Find ladder sizes in a random tree with 20 tips:
tree <- rtree(20)
ladderSizes(tree)
tree <- rtree(20)
plot(tree)
ladderSizes(tree)
tree <- phyloCheck(tree)
ntip=length(tree$tip.label)
ntip
nn=tree$Nnode
nn
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Ancs
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
BrIsLadder=(rowSums(DP)==1) # which branches (1:nn) are ladders (1 or 0)
BrIsLadder
DP=Pointers
DP[DP<=ntip]=0
DP[DP>ntip]=1
DP
BrIsLadder=(rowSums(DP)==1) # which branches (1:nn) are ladders (1 or 0)
BrIsLadder
LadderBr=(1:nrow(DP))[BrIsLadder] # vector of only br that are part of a ladder
LadderBr
LadderBr <- which(rowSums(DP)==1)
LadderBr
LadderBr <- which(rowSums(DP)==1) BrIsLadder=(rowSums(DP)==1) # which branches are ladders
LadderBr <- which(rowSums(DP)==1)
LadderBr
BrIsLadder=(rowSums(DP)==1) # which branches are ladders
BrIsLadder
BrIsLadder=(rowSums(DP)==1) # which branches are ladders
BrIsLadder
LadderBr=(1:nrow(DP))[BrIsLadder] # vector of only br that are part of a ladder
LadderBr
LadderNodes=ntip+LadderBr  # vector of NODES (orig node id) that are ladders
LadderNodes
allIsLadder=c(rep(0,ntip),BrIsLadder) # 0 for all tips, then 1 or 0 for internal nodes
allIsLadder
BrIsLadder=(rowSums(DP)==1) # which branches are ladders
BrIsLadder
LadderBr=(1:nrow(DP))[BrIsLadder] # vector of only br that are part of a ladder
LadderBr
EL=rbind( cbind(LadderNodes, Pointers[LadderBr,1]),cbind(LadderNodes,Pointers[LadderBr,2])) # Ancestor, Descendant where Ancestor is a Ladder Node (but fast as no finding in the edgelist).
EL
ToKeep=allIsLadder[EL[,2]] # 1 only where second col of EL is a ladder node
ToKeep
EdgeList=EL[ToKeep==1,]     # only keep edges where ancestor and des are ladd
EdgeList
list(ladderSizes=0,ladderBr=NULL)
EdgeList <- t(as.data.frame(EdgeList)) # prevents problems when there is only one row
chEL=matrix(data="hi",nrow=nrow(EdgeList),ncol=2) # coerce to format for graph
chEL[,1]=paste("v",as.character(EdgeList[,1]),sep="")
chEL[,2]=paste("v",as.character(EdgeList[,2]),sep="")
gr=graph_from_edgelist(chEL)
ladderSizes <- components(gr)$csize # sizes of different ladder components
tree <- rtree(20)
plot(tree)
ladderSizes(tree)
?ladderShow
ladderShow(rtree(50), ladderCol="blue", edge.width=2)
tree <- rtree(50)
tree <- rtree(50)
ladderShow(tree, ladderCol="blue", edge.width=2)
ladderSizes(tree)
tree <- rtree(50)
ladderShow(tree, ladderCol="blue", edge.width=2)
ladderSizes(tree)
tree <- rtree(50)
plot(tree)
ladderSizes(tree)
tree <- rtree(500)
plot(tree)
ladderSizes(tree)
tree <- rtree(20)
plot(tree)
ladderSizes(tree)
?ladderShow
tree <- rtree(20)
plot(tree)
ladderSizes(tree)
ladderShow(tree)
?makeEpiRecord
setwd("C:/Users/mlkendal/Dropbox/phyloTop")
devtools::document()
library(treescape)
devtools::load_all(".")
