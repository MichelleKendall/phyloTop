labels[1:num.tips]=1     # tips are 1 here.
NodeIDS= (num.tips + 1) : (2*num.tips -1)
# fill in the configuration sizes of internal nodes
while (any(is.na(labels))) {
IsReady = NodeIDS[ vapply(NodeIDS,function(x) !any(is.na(labels[tree$edge[which(tree$edge[,1]==x),2]])) & is.na(labels[x])  ,FUN.VALUE=TRUE) ]
TheseLabels = unlist(sapply(IsReady, function(x) sum(labels[tree$edge[tree$edge[,1]==x,2]])))
labels[IsReady]=TheseLabels
}
numClades=vapply(1:maxClade, function(x) sum(labels==x),FUN.VALUE=1)
names(numClades) <- 1:maxClade
return(list(cladeSizes=labels,numClades=numClades))
}
cladeSizes <- nConfig(tree)$cladeSizes
cladeSizes
which(cladeSizes==configSize)
configSize=2
which(cladeSizes==configSize)
?plot.phylo
configShow(rtree(20),3)
configShow <- function(tree,configSize, ...) {
tree <- phyloCheck(tree)
cladeSizes <- nConfig(tree)$cladeSizes
which(cladeSizes==configSize)
plot(tree, ...)
}
configShow(rtree(20),3)
configShow(rtree(20),3, edge.width=2)
which(cladeSizes==configSize)
ladderShow <- function(tree, mainCol="black", ladderCol="red", ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
ladderBranches <- ladderSizes(tree)$ladderBr
col <- rep(mainCol,nEdges)
# If the ladder number is at least one make the edge red
for (i in ladderBranches) {
col[i] <- ladderCol
}
plot(tree,edge.color=col, ...)
}
ladderShow(rtree(50), ladderCol="blue", edge.width=2)
ladderShow(rtree(50), mainCol="red", ladderCol="blue", edge.width=2)
ladderShow(rtree(50), ladderCol="blue", edge.width=2)
ladderShow <- function(tree, mainCol="black", ladderCol="red", ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
ladderBranches <- ladderSizes(tree)$ladderBr
col <- rep(mainCol,nEdges)
# If the ladder number is at least one make the edge red
for (i in ladderBranches) {
col[i] <- ladderCol
}
plot(tree,edge.color=col, ...)
}
devtools::document()
cladeSizes
cladeSizeToHighlight <- which(cladeSizes==configSize)
cladesToHighlight <- which(cladeSizes==configSize)
cladesToHighlight
edgeList
col[[edgeList[which(edgeList[1,]==i),2]]] <- "red"
for (i in cladesToHighlight){
col[[edgeList[which(edgeList[1,]==i),2]]] <- "red"
}
edgeList[which(edgeList[1,]==i),2]
cladesToHighlight
i <- 25
edgeList
which(edgeList[1,]==i)
which(edgeList[,1]==i)
configShow <- function(tree,configSize, ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
for (i in cladesToHighlight){
col[[which(edgeList[,1]==i)]]] <- "red"
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),2, edge.width=2)
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
for (i in cladesToHighlight){
col[[which(edgeList[,1]==i)]] <- "red"
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),2, edge.width=2)
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
allcladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
cladesToHighlight
col
cladesToHighlight
cladesToHighlight[[1]]
which(edgeList[,1]==i)
col[which(edgeList[,1]==i)] <- "red"
col
cladesToHighlight
i <- 27
which(edgeList[,1]==i)
nodelabels()
nConfig(rtree(10))
devtools::document()
allcladeSizes <- nConfig(tree)$cladeSizes
allcladeSizes
edgeList
tree <- rtree(10)
nConfig(tree)
configShow(tree,2, edge.width=2)
nodelabels()
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
}
plot(tree, edge.col=col, ...)
}
configShow(tree,2, edge.width=2)
nodelabels()
edgeList <- tree$edge
edgeList
tiplabels()
nEdges <- length(tree$edge[,1])
nEdges
col <- rep('black',nEdges)
col
allcladeSizes <- nConfig(tree)$cladeSizes
allcladeSizes
cladesToHighlight <- which(cladeSizes==configSize)
cladesToHighlight
configSize
cladesToHighlight <- which(allcladeSizes==configSize)
cladesToHighlight
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
}
plot(tree, edge.col=col, ...)
}
configShow(tree,2, edge.width=2)
configShow(tree,2, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),4, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),3, edge.width=2)
ntip=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
children <- Pointers[i-ntips,]
children
i
cladesToHighlight
i <- 15
children <- Pointers[i-ntips,]
children
children <- Pointers[i-ntips,]
children
i-ntips
i
i-ntips
(i - ntips)
i
ntips
plot(tree)
nodelabels()
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntip=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
cladesToHighlight
configShow(rtree(20),1, edge.width=2)
configShow(rtree(20),2, edge.width=2)
configShow(rtree(20),3, edge.width=2)
plot(tree)
nodelabels
nodelabels()
tiplabels()
Pointers
configSize<-3
cladesToHighlight <- which(allcladeSizes==configSize)
cladesToHighlight
ntip=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
col <- rep('black',nEdges)
i <- 14
col[which(edgeList[,1]==i)] <- "red"
plot(tree, edge.col=col, ...)
edgeList
col
children <- Pointers[(i - ntips),]
children
(i - ntips)
i
Pointers
ntips
ntips=length(tree$tip.label)
i - ntips
children <- Pointers[(i - ntips),]
children
children[[1]]
which(edgeList[,1]==children[[1]])
if (any(chilren) %in% Ancs)
if (any(chilren) %in% Ancs) stop("test")
if (any(children) %in% Ancs) stop("test")
if (any(c(children[[1]],children[[2]]) %in% Ancs) stop("test")
if (any(c(children[[1]],children[[2]]) %in% Ancs)) stop("test")
children[[1]]
(i - ntips)
children <- Pointers[(i - ntips),]
children
which(edgeList[,1]==i)
col[which(edgeList[,1]==i)] <- "red"
i <- 2
which(edgeList[,1]==i)
col[which(edgeList[,1]==i)] <- "red"
col
node <- i
is.element(node, Ancs)
i
i <- 15
is.element(node, Ancs)
node <- i
is.element(node, Ancs)
node <- c(14,2)
is.element(node, Ancs)
(node - ntips)
node[which(is.element(node,Ancs))]
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
children
col[which(edgeList[,1]%in%children)] <- "red"
col
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
}
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
cladesToHighlight
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
cladesToHighlight
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
}
}
i
cladesToHighlight
col[which(edgeList[,1]==i)] <- "red"
col
node <- i
node
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
children
col[which(edgeList[,1]%in%children)] <- "red"
col
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
}
}
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
node <- children
}
}
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
node <- children
}
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),3, edge.width=2)
tree <- rtree(20)
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Ancs
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
Pointers
edgeList
Ancs=(ntip+1):(ntip+nn) # assumes tips are 1:ntip, then internal nodes
Ancs
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep('black',nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntips+1):(ntips+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- "red"
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- "red"
node <- children
}
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),4, edge.width=2)
configShow(rtree(20),4, edge.width=2)
configShow(rtree(20),4, edge.width=2)
configShow(rtree(20),5, edge.width=2)
}
configShow(rtree(20),5, edge.width=2)
configShow(rtree(20),5, edge.width=2)
configShow(rtree(20),5, edge.width=2)
configShow(rtree(20),6, edge.width=2)
configShow <- function(tree, configSize, mainCol="black", ladderCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep(mainCol,nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntips+1):(ntips+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- ladderCol
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- ladderCol
node <- children
}
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),6, edge.width=2)
configShow(rtree(20),6, edge.width=2)
configShow(rtree(20),3, edge.width=2)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
#' Plot a tree highlighting configurations
#'
#' Plots the tree with configurations of a given size highlighted.
#'
#' @author Michelle Kendall \email{michelle.louise.kendall@@gmail.com}
#' @author Michael Boyd \email{mboyd855@gmail.com}
#'
#' @param tree a tree of class \code{phylo4}
#' @param configSize an integer giving the configuration size of interest
#' @param mainCol colour for branches which are not in configurations of the chosen size (default is black)
#' @param configCol colour for branches which are in such configurations (default is red)
#' @return A plot of the tree, highlighting the configurations of the given size.
#'
#' @import ape
#'
#' @examples
#' ## Highlight pitchforks in a random tree with 20 tips:
#' \dontrun{
#' configShow(rtree(20),3, edge.width=2)
#' }
#'
#' @export
configShow <- function(tree, configSize, mainCol="black", configCol="red",  ...) {
tree <- phyloCheck(tree)
edgeList <- tree$edge
nEdges <- length(tree$edge[,1])
col <- rep(mainCol,nEdges)
allcladeSizes <- nConfig(tree)$cladeSizes
cladesToHighlight <- which(allcladeSizes==configSize)
ntips=length(tree$tip.label)
nn=tree$Nnode
Ancs=(ntips+1):(ntips+nn) # assumes tips are 1:ntip, then internal nodes
# for each internal node (numbered 1:(ntips-1) in the rows of "pointers"), find its immediate children
Pointers=t(vapply(Ancs, function(x) tree$edge[tree$edge[,1]==x,2], FUN.VALUE=c(1,2)))
for (i in cladesToHighlight){
col[which(edgeList[,1]==i)] <- configCol
node <- i
while(any(is.element(node, Ancs))) {# while any of the nodes are ancestors (i.e. have descendants)
children <- Pointers[(node[which(is.element(node,Ancs))] - ntips),]
col[which(edgeList[,1]%in%children)] <- configCol
node <- children
}
}
plot(tree, edge.col=col, ...)
}
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
configShow(rtree(20),3, edge.width=2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
